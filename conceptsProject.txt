
grid_build(N,M):- g(N,N,M).
g(0,_,[]).
g(N,NC,[H|Z]):- N>0,length(H,NC),N1 is N-1,g(N1,NC,Z).




checklist(0,_,[]).
checklist(N,R,[H|T]):- N>0,member(H,R),N2 is N-1,checklist(N2,R,T).

grid_gen1(0,_,_,[]).
grid_gen1(N1,N,R,[H|T]):- N1>0, checklist(N,R,H),N2 is N1-1,grid_gen1(N2,N,R,T).

grid_gen(N,G):- num_gen(1,N,R), grid_gen1(N,N,R,G).




num_gen(F,L,R):- N is L-F+1,n(N,F,R).
n(0,_,[]).
n(N,F,[F|T]):- N>0,N1 is N-1,F1 is F+1 ,n(N1,F1,T).




maximum(X,Y,X):- X>=Y.
maximum(X,Y,Y):- Y>X.
max([],0).
max([H|T],N):-max_member(M,H),max(T,N1),maximum(M,N1,N).
del([],L,L).
del([H|T],L,L1):-del(T,L,L2),delete(L2,H,L1).
traverse([],[]).
traverse([H|T],L):-del(H,L,L1),traverse(T,L1).
check_num_grid(G):-max(G,N),length(G,N1),N1>=N,num_gen(1,N,R),traverse(G,R).




geti(0,[H|_],H).
geti(I,[_|T],X):-I>0,I1 is I-1,geti(I1,T,X).
getC(_,[],[]).
getC(I,[H|T],[H2|T2]):- geti(I,H,H2),getC(I,T,T2).



notequal1([],[]).
notequal1([H|T],[H2|T2]):- H2\==H,notequal1(T,T2).
acceptable_distribution(G):-trans(G,G2),notequal1(G,G2).




acceptable_permutation(L,R):- permutation(L,R),notequal1(L,R).


trans(G,G2):-length(G,N),t(G,G2,0,N).
t(_,[],N,N).
t(G,[H|T],N1,N):- getC(N1,G,H),N2 is N1+1,t(G,T,N2,N).


distinct_rows([]).
distinct_rows([H|T]):- \+member(H,T),distinct_rows(T).


distinct_columns(G):-trans(G,G2),distinct_rows(G2).



row_col_match(G):-trans(G,G2),p(G,G2),acceptable_distribution(G).
p([],_).
p([X|Y],G):- member(X,G),p(Y,G).	

row_col_match2(G):-trans(G,G2),acceptable_permutation(G,G2).



helsinki(N,G):-
    grid_build(N,G) ,
	row_col_match2(G),
	grid_gen(N,G),
	check_num_grid(G),
	acceptable_distribution(G),
	distinct_rows(G),
	distinct_columns(G).
	







